{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      verificationCode: \"\",\n      serverVerificationCode: \"\",\n      registrationError: \"\",\n      countdown: 20,\n      // 倒计时时间，单位秒\n      isCountingDown: false // 是否正在倒计时\n    };\n  },\n  computed: {\n    buttonText() {\n      return this.isCountingDown ? `${this.countdown}秒后重新获取` : \"获取验证码\";\n    }\n  },\n  methods: {\n    async sendVerificationCode() {\n      if (this.isCountingDown) return;\n      try {\n        const response = await axios.post(\"http://localhost:9000/api/send-verification-code\", {\n          email: this.email\n        });\n        console.log(response.data);\n        if (response.data.message === \"验证码发送成功\") {\n          this.serverVerificationCode = response.data.verificationCode;\n          this.startCountdown();\n        } else {\n          this.registrationError = response.data.message;\n        }\n      } catch (error) {\n        console.error(\"发送验证码失败\", error);\n        this.registrationError = \"发送验证码失败，请稍后重试\";\n      }\n    },\n    startCountdown() {\n      this.isCountingDown = true;\n      let timer = setInterval(() => {\n        if (this.countdown > 0) {\n          this.countdown--;\n        } else {\n          clearInterval(timer);\n          this.isCountingDown = false;\n          this.countdown = 60;\n        }\n      }, 1000);\n    },\n    async handleRegister() {\n      if (this.password !== this.confirmPassword) {\n        this.registrationError = \"密码和确认密码不一致\";\n        return;\n      }\n      if (this.verificationCode !== this.serverVerificationCode) {\n        this.registrationError = \"验证码错误或已过期\";\n        return;\n      }\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/users\", {\n          username: this.username,\n          email: this.email,\n          password: this.password,\n          verificationCode: this.verificationCode\n        });\n        if (response.data.message === \"注册成功\") {\n          this.$router.push(\"/login\");\n        } else {\n          this.registrationError = response.data.message;\n        }\n      } catch (error) {\n        console.error(\"注册失败\", error);\n        this.registrationError = \"错误，请稍后重试\";\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","username","email","password","confirmPassword","verificationCode","serverVerificationCode","registrationError","countdown","isCountingDown","computed","buttonText","methods","sendVerificationCode","response","post","console","log","message","startCountdown","error","timer","setInterval","clearInterval","handleRegister","$router","push"],"sources":["/home/toma/桌面/projects/RuralWebApp/frontend/src/views/Register.vue"],"sourcesContent":["<template>\r\n  <div class=\"register-container\">\r\n    <h2 class=\"register-title\">用户注册</h2>\r\n    <form @submit.prevent=\"handleRegister\" class=\"register-form\">\r\n      <div class=\"form-group\">\r\n        <label for=\"username\">用户名</label>\r\n        <input type=\"text\" id=\"username\" v-model=\"username\" required placeholder=\"请输入用户名\" />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"email\">邮箱</label>\r\n        <input type=\"email\" id=\"email\" v-model=\"email\" required placeholder=\"请输入邮箱\" />\r\n        <div class=\"verification-code-wrapper\">\r\n          <input type=\"text\" id=\"verificationCode\" v-model=\"verificationCode\" required placeholder=\"请输入验证码\" />\r\n          <button type=\"button\" @click=\"sendVerificationCode\" :disabled=\"isCountingDown\" class=\"verification-code-btn\">\r\n            {{ buttonText }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"password\">密码</label>\r\n        <input type=\"password\" id=\"password\" v-model=\"password\" required placeholder=\"请输入密码\" />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"confirmPassword\">确认密码</label>\r\n        <input type=\"password\" id=\"confirmPassword\" v-model=\"confirmPassword\" required placeholder=\"请确认密码\" />\r\n      </div>\r\n      <div v-if=\"registrationError\" class=\"error-message\">{{ registrationError }}</div>\r\n      <button type=\"submit\" class=\"register-btn\">注册</button>\r\n    </form>\r\n    <div class=\"links\">\r\n      <router-link to=\"/login\" class=\"login-link\">已有账号? 登录</router-link>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n      verificationCode: \"\",\r\n      serverVerificationCode: \"\",\r\n      registrationError: \"\",\r\n      countdown: 20, // 倒计时时间，单位秒\r\n      isCountingDown: false, // 是否正在倒计时\r\n    };\r\n  },\r\n  computed: {\r\n    buttonText() {\r\n      return this.isCountingDown ? `${this.countdown}秒后重新获取` : \"获取验证码\";\r\n    },\r\n  },\r\n  methods: {\r\n    async sendVerificationCode() {\r\n      if (this.isCountingDown) return;\r\n\r\n      try {\r\n        const response = await axios.post(\"http://localhost:9000/api/send-verification-code\", {\r\n          email: this.email,\r\n        });\r\n        console.log(response.data);\r\n        if (response.data.message === \"验证码发送成功\") {\r\n          this.serverVerificationCode = response.data.verificationCode;\r\n          this.startCountdown();\r\n        } else {\r\n          this.registrationError = response.data.message;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"发送验证码失败\", error);\r\n        this.registrationError = \"发送验证码失败，请稍后重试\";\r\n      }\r\n    },\r\n    startCountdown() {\r\n      this.isCountingDown = true;\r\n      let timer = setInterval(() => {\r\n        if (this.countdown > 0) {\r\n          this.countdown--;\r\n        } else {\r\n          clearInterval(timer);\r\n          this.isCountingDown = false;\r\n          this.countdown = 60;\r\n        }\r\n      }, 1000);\r\n    },\r\n    async handleRegister() {\r\n      if (this.password !== this.confirmPassword) {\r\n        this.registrationError = \"密码和确认密码不一致\";\r\n        return;\r\n      }\r\n      if (this.verificationCode !== this.serverVerificationCode) {\r\n        this.registrationError = \"验证码错误或已过期\";\r\n        return;\r\n      }\r\n      try {\r\n        const response = await axios.post(\"http://localhost:5000/api/users\", {\r\n          username: this.username,\r\n          email: this.email,\r\n          password: this.password,\r\n          verificationCode: this.verificationCode,\r\n        });\r\n        if (response.data.message === \"注册成功\") {\r\n          this.$router.push(\"/login\");\r\n        } else {\r\n          this.registrationError = response.data.message;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"注册失败\", error);\r\n        this.registrationError = \"错误，请稍后重试\";\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.register-container {\r\n  max-width: 400px;\r\n  margin: 2rem auto;\r\n  padding: 2rem;\r\n  background-color: #ffffff;\r\n  border-radius: 10px;\r\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\r\n  font-family: 'Arial', sans-serif;\r\n  text-align: center;\r\n}\r\n\r\n.register-title {\r\n  margin-bottom: 1.5rem;\r\n  color: #333;\r\n  font-size: 1.75rem;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 1.5rem;\r\n  text-align: left;\r\n}\r\n\r\n.form-group label {\r\n  display: block;\r\n  margin-bottom: 0.5rem;\r\n  font-weight: bold;\r\n  color: #555;\r\n}\r\n\r\n.form-group input {\r\n  width: 100%;\r\n  max-width: 374px;\r\n  padding: 12px;\r\n  font-size: 16px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 8px;\r\n  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.verification-code-wrapper {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.verification-code-wrapper input {\r\n  width: 60%;\r\n  margin-right: 10px;\r\n}\r\n\r\n.verification-code-wrapper button {\r\n  width: 35%;\r\n  padding: 10px;\r\n  font-size: 16px;\r\n  background-color: #007BFF;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease, box-shadow 0.3s ease;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.verification-code-wrapper button:hover {\r\n  background-color: #0056b3;\r\n  box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.verification-code-wrapper button:disabled {\r\n  background-color: #cccccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.error-message {\r\n  color: #d8000c;\r\n  background-color: #ffbaba;\r\n  padding: 10px;\r\n  margin-bottom: 1.5rem;\r\n  text-align: center;\r\n  border-radius: 5px;\r\n}\r\n\r\n.register-btn {\r\n  width: 100%;\r\n  padding: 12px;\r\n  font-size: 16px;\r\n  background-color: #007BFF;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.register-btn:hover {\r\n  background-color: #0056b3;\r\n}\r\n\r\n.links {\r\n  margin-top: 1.5rem;\r\n  text-align: center;\r\n}\r\n\r\n.login-link {\r\n  display: block;\r\n  margin: 5px 0;\r\n  color: #007BFF;\r\n  text-decoration: none;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.login-link:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 600px) {\r\n  .register-container {\r\n    padding: 1.5rem;\r\n  }\r\n\r\n  .register-title {\r\n    font-size: 1.5rem;\r\n  }\r\n\r\n  .form-group input {\r\n    padding: 10px;\r\n  }\r\n\r\n  .register-btn {\r\n    padding: 10px;\r\n  }\r\n\r\n  .verification-code-wrapper input {\r\n    width: 50%;\r\n    margin-right: 5px;\r\n  }\r\n\r\n  .verification-code-wrapper button {\r\n    width: 45%;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}